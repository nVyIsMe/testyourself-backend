import os
from flask import Flask, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
from flask_cors import CORS # Gi·ªØ l·∫°i
from app.config import config
from flask_migrate import Migrate

# Kh·ªüi t·∫°o db v√† migrate
db = SQLAlchemy()
migrate = Migrate()

def create_app(config_name=None):
    # N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
    load_dotenv()

    # Kh·ªüi t·∫°o Flask app
    app = Flask(__name__)

    # ... (c√°c d√≤ng app.config c·ªßa b·∫°n ·ªü ƒë√¢y) ...
    app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "default_secret_key")
    app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "default_jwt_secret")
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv("DEV_DATABASE_URL")
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    app.config["SESSION_COOKIE_SECURE"] = False
    app.config["UPLOAD_FOLDER"] = os.path.abspath(os.path.join(os.path.dirname(__file__), "uploads"))
    app.config.from_object(config['development'])

        # L·∫•y th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n (th∆∞ m·ª•c ch·ª©a 'app', 'run.py', 'uploads')
    base_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
    # T·∫°o ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn th∆∞ m·ª•c 'uploads' ·ªü g·ªëc
    app.config["UPLOAD_FOLDER"] = os.path.join(base_dir, "uploads")
    # *** ƒê√ÇY L√Ä D√íNG QUAN TR·ªåNG NH·∫§T ***
    # Cho ph√©p frontend v√† c√°c header c·∫ßn thi·∫øt
    CORS(app, 
     origins=["http://localhost:5173"], 
     supports_credentials=True,
     allow_headers=["*"]  # D√ôNG D·∫§U SAO CHO D·ªÑ DEBUG NH·∫§T
)

    # *** ƒê·∫¢M B·∫¢O KH√îNG C√ì @app.after_request N√ÄO ·ªû ƒê√ÇY ***

    # Cho ph√©p truy c·∫≠p ·∫£nh tƒ©nh trong th∆∞ m·ª•c uploads
    @app.route('/uploads/<filename>')
    def serve_uploaded_file(filename):
        return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

    # Kh·ªüi t·∫°o db v√† migrate
    db.init_app(app)
    migrate.init_app(app, db)

    # ƒêƒÉng k√Ω c√°c blueprint
    from app.auth import auth_bp
    app.register_blueprint(auth_bp)

    from app.routes.courses import courses_bp
    app.register_blueprint(courses_bp)

    from app.routes.public import public_bp
    app.register_blueprint(public_bp)
    
    from app.admin import admin_bp
    app.register_blueprint(admin_bp)

    # Log REDIRECT_URI n·∫øu c√≥ d√πng OAuth
    from app.utils.oauth import REDIRECT_URI
    app.logger.info(f"üîÅ REDIRECT URI ƒëang d√πng: {REDIRECT_URI}")

    return app
